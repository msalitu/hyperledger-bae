/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.conwet.biznet

enum PricingModel {
  o ONE_TIME
  o RECURRING
  o USAGE
}

enum AgreementState {
  o PAYMENT_PENDING
  o ACTIVE
}


// Participants

participant User identified by userId{
  o String userId
}

// Assets

asset Dataset identified by id{
  o String id
  o String data
  o String description
  --> User owner
}

asset Offering identified by offerId{
  o String offerId
  o PricingModel pricingModel
  --> Dataset dataset
}

// encrypted with the other's public key
asset TangleStream identified by root{
  o String side_key
  o String root 
}

asset Agreement identified by agreementId{
  o String agreementId
  o DateTime timestamp
  o AgreementState state
  o TangleStream queryStream
  o TangleStream dataStream
  --> Offering offer
  --> User customer
}

// Transactions

transaction CreateDataset {
  o String root
  --> User owner
}

transaction MakeAgreement {
  --> Offering offering
  --> User customer
  --> TangleStream queryStream
}

transaction CreateOffering {
  o String offeringId
  o PricingModel pricingModel
  --> Dataset dataset
}

transaction PaymentCompleted {
  --> Agreement agreement
  o String proofOfPayment
}

transaction AcceptAgreement {
  --> Agreement agreement
  --> TangleStream dataStream
}

transaction SettleAgreement {
  --> Agreement agreement
  o Boolean renew
}

// Events

event CreateDatasetEvent {
  o String root
  --> User owner
}

event MakeAgreementEvent {
  o String transactionId
  --> Offering offering
  --> User customer 
  --> TangleStream queryStream
}

event CreateOfferingEvent{
  o String offeringId
  o PricingModel pricingModel
  --> Dataset dataset
}

event PaymentCompletedEvent {
  --> Agreement agreement
  o String proofOfPayment
}

event AcceptAgreementEvent {
  --> Agreement agreement
  --> TangleStream dataStream
}

event SettleAgreementEvent {
  --> Agreement agreement
  o Boolean renew
}
